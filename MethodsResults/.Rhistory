}
#if i have negative numbers they should be 0
for(i in 1:ncol(results)){
results[i][results[i] < 0] <- 0
}
## SPEED UP ##
## calculate amounts for speed up questions = total - switch. Divide by total to make comparison possible
for(i in seq(2, 4, by = 2)){
results[i][is.na(results[i])] <- 30 #ppl who paid everything
results[i] <- 30 - results[i]
## Calculating Hyperbolic and Exponential
if(i == 2){
present.now = TRUE} else if (i == 4) {
present.now = FALSE
}
# hyperbolic
hyperbolic.exponential[i-1] = hyperbolic_calculator(results[i], present = present.now, small = TRUE)
# exponential
hyperbolic.exponential[i] = exponential_calculator(results[i], present = present.now, small = TRUE)
}
####################
for(i in seq(6, 8, by = 2)){
results[i][is.na(results[i])] <- 300 #ppl who paid everything
results[i] <- 300 - results[i]
## Calculating Hyperbolic, Exponential
if(i == 6){
present.now = FALSE} else if (i == 8) {
present.now = TRUE
}
# hyperbolic
hyperbolic.exponential[i-1] = hyperbolic_calculator(results[i], present = present.now, small = FALSE)
#exponential
hyperbolic.exponential[i] = exponential_calculator(results[i], present = present.now, small = TRUE)
}
## DELAY DISCOUNTING ################
# calculate non switchers
for(i in seq(10, 14, by = 4)){
results[i][is.na(results[i])] <- 30 #ppl always waited
## Calculating Hyperbolic, Exponential
if(i == 10){
present.now = TRUE} else if (i == 14) {
present.now = FALSE
}
# hyperbolic
hyperbolic.exponential[i-1] = hyperbolic_calculator(results[i], present = present.now, small = TRUE)
# exponential
hyperbolic.exponential[i] = exponential_calculator(results[i], present = present.now, small = TRUE)
}
######################
for(i in seq(12, 16, by = 4)){
results[i][is.na(results[i])] <- 300 #ppl always waited
## Calculating Hyperbolic and Exponential
if(i == 12){
present.now = TRUE} else if (i == 16) {
present.now = FALSE
}
#hyperbolic
hyperbolic.exponential[i-1] <- hyperbolic_calculator(results[i], present = present.now, small = FALSE)
#exponential
hyperbolic.exponential[i] = exponential_calculator(results[i], present = present.now, small = TRUE)
}
results2 <- results
results2 <- results2 %>% select(seq(2, 16, by =2)) %>%
select(ssp.indifference, ssf.indifference, tdsp.indifference, tdsf.indifference,
slp.indifference, slf.indifference, tdlp.indifference, tdlf.indifference)
results.consistent <- results %>%
select(ends_with(".consistent")) %>%
select(ssp.consistent, ssf.consistent, tdsp.consistent, tdsf.consistent,
slp.consistent, slf.consistent, tdlp.consistent, tdlf.consistent)
beta.discounter <- function(indifference.soon, indifference.later, small){
if (small == TRUE){
a = 30
} else if (small == FALSE) {
a = 300
}
delta = (indifference.later/a)^(1/6)
beta = (indifference.soon/a)*(1/delta^5)
return(beta)
}
delta.discounter <- function(indifference.soon, indifference.later, small){
if (small == TRUE){
a = 30
} else if (small == FALSE) {
a = 300
}
delta = (indifference.later/a)^(1/6)
beta = (indifference.soon/a)*(1/delta^5)
return(delta)
}
beta.delta.results <- tibble("ss.beta"=1:(nrow(delay.discounting)-1), "ss.delta"=1:(nrow(delay.discounting)-1),
"tds.beta"=1:(nrow(delay.discounting)-1),"tds.delta"=1:(nrow(delay.discounting)-1),
"sl.beta"=1:(nrow(delay.discounting)-1), "sl.delta"=1:(nrow(delay.discounting)-1),   "tdl.beta"=1:(nrow(delay.discounting)-1), "tdl.delta"=1:(nrow(delay.discounting)-1))
# small
for(i in seq(1, 3, by = 2)){
beta.delta.results[i] <- beta.discounter(results2[i], results2[i+1], small = TRUE)
beta.delta.results[i+1] <- delta.discounter(results2[i], results2[i+1], small = TRUE)
}
# large
for(i in seq(5, 7, by = 2)){
beta.delta.results[i] <- beta.discounter(results2[i], results2[i+1], small = FALSE)
beta.delta.results[i+1] <- delta.discounter(results2[i], results2[i+1], small = FALSE)
}
for(i in seq(2, ncol(results.consistent), by = 2)){
results[i][results[i-1] == FALSE] <- NA
beta.delta.results[i-1][results.consistent[i] == FALSE | results.consistent[i-1] == FALSE] <- NA # beta
beta.delta.results[i][results.consistent[i] == FALSE | results.consistent[i-1] == FALSE] <- NA # delta
}
# save beta delta
beta.delta.results <- add_row(beta.delta.results, .before=1)
delay.discounting <- bind_cols(delay.discounting, beta.delta.results)
for(i in seq(2, 4, by = 2)){
# proportional
results[i] <- results[i]/30
}
####################
for(i in seq(6, 8, by = 2)){
# proportional
results[i] <- results[i]/300
}
##############
for(i in seq(10, 14, by = 4)){
# proportional
results[i] <-results[i]/30
}
######################
for(i in seq(12, 16, by = 4)){
#proportional
results[i] <-results[i]/300
}
### Create an Average of the Proportional
results <- results %>%
mutate(average = rowMeans(.))
# save results #############
results <- add_row(results, .before=1)
hyperbolic.exponential <- add_row(hyperbolic.exponential, .before=1)
# add proportional to data set
delay.discounting <- bind_cols(delay.discounting, results)
for(i in seq(2, ncol(results), by = 2)){
results[i][results[i-1] == FALSE] <- NA
hyperbolic.exponential[i-1][results[i-1] == FALSE] <- NA # hyperbolic
hyperbolic.exponential[i][results[i-1] == FALSE] <- NA # exponential
}
colnames(results) <- paste(colnames(results), "consistent",  sep = ".")
results <- results %>%
select(seq(2, ncol(results), by = 2)) %>%
mutate(average.consistent = rowMeans(.))
# save proportional
delay.discounting <- bind_cols(delay.discounting, results)
# save hyperbolic & exponential
delay.discounting <- bind_cols(delay.discounting, hyperbolic.exponential)
choices <- delay.discounting %>%
select(Q2.2_1:Q9.2_16) %>%
select(-contains("click"), -contains("page"))
choices[choices=="Yes" | choices==1] <- 0 ## impatient chocies
choices[choices=="No" | choices==2] <- 1
# overall patience
patience <- choices %>%
mutate_all(funs(as.numeric)) %>%
rowSums()
patience <- as_tibble(patience/ncol(choices))%>%
mutate(Patience = value) %>%
select(-value)
delay.discounting <- bind_cols(delay.discounting, patience)
# patience speed up
s.patience <- choices %>%
select(1:64) %>%
mutate_all(funs(as.numeric)) %>%
rowSums()
s.patience <- as_tibble(s.patience/ncol(choices))%>%
mutate(s.Patience = value) %>%
select(-value)
delay.discounting <- bind_cols(delay.discounting, s.patience)
# patience time discounting
td.patience <- choices %>%
select(65:ncol(choices)) %>%
mutate_all(funs(as.numeric)) %>%
rowSums()
td.patience <- as_tibble(td.patience/ncol(choices))%>%
mutate(td.Patience = value) %>%
select(-value)
delay.discounting <- bind_cols(delay.discounting, td.patience)
db <- read_csv("Delay Discounting_computer_80.csv")
db.newdata <- delay.discounting %>%  #collect old calculated vars
select("IPAddress", bmi:ncol(delay.discounting))
db <- db %>%  # remove discounting and emotions
select(-(1:3), -(5:274)) %>%
select(-(117:ncol(db)))
db <- right_join(db, db.newdata)
fms <- db %>%
select(starts_with("Q120"), Q15.11) %>% # take only the columns relating the fms scale
mutate_all(funs(as.numeric)) %>%
mutate(comparison.shop = Q120_1_1, bills.on.time = Q120_1_9, monthly.expense.record = Q120_1_2,# give meaningful names
within.budget = Q120_1_10, credit.infull = Q120_1_6, maxout.creditcard = Q120_1_7,
minimum.on.loan = Q120_1_8, maintain.emergency.fund = Q120_1_11,
save.money.paycheck = Q120_1_12, save.longterm.goal = Q120_1_13, save.retirement = Q120_1_14,
bought.stock = Q120_1_15, health.insurance = Q120_1_16, property.insurance = Q120_1_17,
life.insurance = Q120_1_18) %>%
mutate(smartphone.warenty = recode(Q15.11, `1`=1, `2`=0)) %>% #smart phone warrenty
select(-starts_with("Q")) %>% # get rid of original questions
mutate(maxout.creditcard = 6 - maxout.creditcard,    #reverse coded as descried in Dew & Xiao
minimum.on.loan = 6 - minimum.on.loan) %>%
mutate(OverallFMS = rowMeans(.),
FMS_F1.saving = rowMeans(subset(., select = c(maintain.emergency.fund, save.money.paycheck,
save.longterm.goal, save.retirement,
bought.stock)), na.rm = TRUE),
FMS_F2.insurance = rowMeans(subset(., select = c(health.insurance, property.insurance,
life.insurance)), na.rm = TRUE),
FMS_F3.budget = rowMeans(subset(., select = c(comparison.shop, bills.on.time,
monthly.expense.record, within.budget)), na.rm = TRUE),
FMS_F4.credit = rowMeans(subset(., select = c(credit.infull, maxout.creditcard,
minimum.on.loan)), na.rm = TRUE))
# save results
db <- bind_cols(fms, db)
#rename columns
db <- rename(db, vape = Q11.2, smoke = Q11.3, smoke.age = Q11.9, alcohol = Q11.4, alcohol.age = Q11.5,
passed.out.from.drinking = Q11.10, caffeine = Q11.6, marijuana = Q11.7, gamble = Q11.8,
attention.to.politics = Q12.2, register.vote = `12.11`, senate = Q12.21,
donate.campaign = Q12.22,music.tax = Q12.4, green.tax = Q12.5, ideology = Q12.61, vote = Q12.71,
vote.early = Q12.72, arrested = Q12.7, speedingtickets = Q12.8, caraccident = Q12.9,
wealth.comparison = Q13.2, creditcard.late = Q13.3,
payday.lending = Q13.4, sustainable.goods = Q13.6,
sustain.self = Q13.7, income.saved.percent = Q13.8_1, actual.saved = Q104,
prescription = Q14.2, fastfood = Q14.3, actual.debt = Q105,
dentalstatus = Q14.4, exercise = Q14.5, vaccination = Q14.6, washinghands = Q14.7_1,
television = Q15.2, high.adreneline = Q15.3, physical.fight = Q15.4, luxurygoods = Q15.5,
shopping.anxiety = Q15.6, check.online = Q15.7, had.sex = Q16.3, sex.age = Q16.4, adultry = Q16.5,
multple.partners = Q16.51, inebriated.sex = Q16.6, age = Q17.3, marital.status = Q17.4,
have.children = Q17.5, politcal.affiliation = Q17.51,
age.firstchild = Q17.6, weight = Q17.7, employmentstatus = Q17.10, hoseholdincome = Q17.11,
expected.householdincome = Q17.12, race = Q17.9, english.native = Q17.14)
db <- db %>%
select(-starts_with("Q")) %>% # don't keep original questions
select(-gender_char)  # get rid of non-numeric
confusedpeople.exclude <- db %>%
filter(tdsp.indifference>0, tdlp.indifference>0,  tdsf.indifference>0, tdlf.indifference>0,
ssp.indifference>0, slp.indifference>0, ssf.indifference>0, slf.indifference>0)
db <- db %>% mutate("Confused" = !IPAddress %in% confusedpeople.exclude$IPAddress)
confusedpeople.exclude %>% summarise(Percent.of.Confused.People = (nrow(db)-nrow(.))/nrow(db))
db %>%
mutate(Percent.Inconsistent = average.consistent) %>%
select(Percent.Inconsistent) %>%
summarise_all(funs(mean(is.na(.))))
weirdos <- delay.discounting[is.infinite(delay.discounting$tdsf.hyperbolic) | is.infinite(delay.discounting$slp.exponential) |
is.infinite(delay.discounting$slp.hyperbolic) | is.infinite(delay.discounting$tdsf.exponential), ]
weirdos <- weirdos %>%
mutate("Confused" = !IPAddress %in% confusedpeople.exclude$IPAddress) %>%
select(questions$speedup.small.future, ssf.consistent, ssf.indifference, ssf.hyperbolic, ssf.exponential,
questions$speedup.small.present, ssp.consistent, ssp.indifference, ssp.hyperbolic, ssp.exponential,
questions$speedup.large.future, slf.consistent, slf.indifference, slf.hyperbolic, slf.exponential,
questions$speedup.large.present, slp.consistent, slp.indifference, slp.hyperbolic, slp.exponential,
questions$td.small.future, tdsf.consistent, tdsf.indifference, tdsf.hyperbolic, tdsf.exponential,
questions$td.small.present, tdsp.consistent, tdsp.indifference, tdsp.hyperbolic, tdsp.exponential,
questions$td.large.future, tdlf.consistent, tdlf.indifference, tdlf.hyperbolic, tdlf.exponential,
questions$td.large.present, tdlp.consistent, tdlp.indifference, tdlp.hyperbolic, tdlp.exponential)
db <- db %>% select(-IPAddress) %>% mutate_all(as.numeric)
sd.times.3 <- apply(db, 2, sd, na.rm = TRUE)*3
sd.times.3 <- as.data.frame(sd.times.3)
mean.cols <- colMeans(db, na.rm = TRUE)
mean.cols <- as.data.frame(mean.cols)
mean.sd3 <- sd.times.3 + mean.cols
continuous.vars = c("alcohol.age", "sustain.self", "smoke.age", "passed.out.from.drinking", "speedingtickets", "caraccident", "physical.fight", "check.online", "age", "age.firstchild", "weight", "bmi")
for(i in continuous.vars){ ##this wont work for car accidents cause mean.sd3 = 1 ...
db[,i][abs(db[,i])>mean.sd3[i,1]] <- NA
}
proportions.cols = delay.discounting %>% select(ends_with("indifference.consistent")) %>% colnames(.)
patience.cols = c("Patience", "s.Patience", "td.Patience")
hyperbolic.exponential.cols = hyperbolic.exponential %>%
select(ends_with("hyperbolic"), ends_with("exponential")) %>%
colnames(.)
beta.delta.cols = colnames(beta.delta.results)
db <- db[2:nrow(db),]
proportion.correlations <- db %>% cor(use="pairwise.complete.obs") %>% # using people who are consistent. proportions
as.data.frame() %>%
round(2) %>%
select(proportions.cols)
patience.correlations <- db %>% cor(use="pairwise.complete.obs") %>% # patience scores
as.data.frame() %>%
round(2) %>%
select(patience.cols)
hyperbolic.exponential.correlations <- db %>% cor(use="pairwise.complete.obs") %>% # patience scores
as.data.frame() %>%
round(2) %>%
select(hyperbolic.exponential.cols)
beta.delta.correlations<- db %>% cor(use="pairwise.complete.obs") %>% # patience scores
as.data.frame() %>%
round(2) %>%
select(beta.delta.cols)
respond.count <- survey.data %>%
select(Status) %>%
filter(!Status == "Survey Preview") %>%
count()
respond.count <- as.numeric(respond.count)
female <- delay.discounting$gender[which(delay.discounting$gender==0)]
female <- sum(female == 0)
male <- delay.discounting$gender[which(delay.discounting$gender==1)]
male <- sum(male == 1)
## final sample size
final.samplesize <- nrow(db)
## age correlations
age.min <- min(db$age, na.rm = TRUE)
age.max <- max(db$age, na.rm = TRUE)
library(knitr)
taskname <- discountingtasksnames
taskname <- sort(as.character(taskname))
taskname <- str_replace(taskname, "td", "Time Discounting")
taskname <- str_replace_all(taskname, fixed("."), " ")
proper=function(x) paste0(toupper(substr(x, 1, 1)), tolower(substring(x, 2)))
taskname <- proper(taskname)
abbreviation <- c("slf", "slp", "ssf", "ssp", "tdlf", "tdlp", "tdsf", "tdsp")
sooner <- c("1 month", "today")
later <- c("7 months", "6 months")
maximum.payment.size <- c("300", "300", "30", "30")
methods.table <- data.frame(taskname, abbreviation, sooner, later, maximum.payment.size)
methods.table %>% kable(align = 'r', col.names = c("Discounting Task","Abbreviation" , "Sooner Payment", "Later Payment", "Maximum Payment Size"))
library(knitr)
taskname <- discountingtasksnames
taskname <- sort(as.character(taskname))
taskname <- str_replace(taskname, "td", "Time Discounting")
taskname <- str_replace_all(taskname, fixed("."), " ")
proper=function(x) paste0(toupper(substr(x, 1, 1)), tolower(substring(x, 2)))
taskname <- proper(taskname)
abbreviation <- c("slf", "slp", "ssf", "ssp", "tdlf", "tdlp", "tdsf", "tdsp")
sooner <- c("1 month", "today")
later <- c("7 months", "6 months")
maximum.payment.size <- c("300", "300", "30", "30")
methods.table <- data.frame(taskname, abbreviation, sooner, later, maximum.payment.size)
methods.table %>% kable(align = 'r', col.names = c("Discounting Task","Abbreviation" , "Sooner Payment", "Later Payment", "Maximum Payment Size"))
install.packages("tinytex")
View(patience.correlations)
proportion.correlations
proportion.correlations %>% kable()
?kable
?kable_styling
kableExtra::kable_styling
kableExtra::kable_styling()
kableExtra::kable_styling
library(kableExtra)
proportion.correlations %>%
kable(format = "markdown") %>%
kable_styling(bootstrap_options = c("striped", "scale_down"))
proportions.cols
proportion.correlations %>%
kable(format = "markdown", col.names = c("ssp.indif", "ssf.indif", "slf.indif", "slp.indif",
"tdsp.indif", "tdlp.indif", "tdsf.indif", "tdlf.indif")) %>%
kable_styling(bootstrap_options = c("striped", "scale_down"))
patience.correlations %>%
kable(format = "markdown") %>%
kable_styling(bootstrap_options = c("striped", "scale_down"))
patience.correlations %>%
kable(format = "markdown") %>%
kable_styling(bootstrap_options = c("striped", "scale_down"))
proportion.correlations %>%
kable(format = "markdown", col.names = c("ssp.indif", "ssf.indif", "slf.indif", "slp.indif",
"tdsp.indif", "tdlp.indif", "tdsf.indif", "tdlf.indif")) %>%
kable_styling(bootstrap_options = c("striped", "scale_down"))
hyperbolic.exponential.correlations %>%
kable(format = "markdown") %>%
kable_styling(bootstrap_options = c("striped", "scale_down"))
beta.delta.correlations %>%
kable(format = "markdown") %>%
kable_styling(bootstrap_options = c("striped", "scale_down"))
library(kableExtra)
patience.correlations %>%
kable(format = "markdown") %>%
kable_styling(bootstrap_options = c("striped", "scale_down"))
View(patience.correlations)
patience.correlations
abs(patience.correlations)
abs(patience.correlations) %>% colSums()
abs(patience.correlations) %>% colSums(na.rm = TRUE)
abs(proportion.correlations) %>%  %>% colSums(na.rm = TRUE)
abs(proportion.correlations) %>% colSums(na.rm = TRUE)
beta.delta.correlations %>% colSums(na.rm = TRUE)
beta.delta.correlations %>% colSums(na.rm = TRUE)
abs(proportion.correlations) %>% colSums(na.rm = TRUE)
abs(patience.correlations) %>% colSums(na.rm = TRUE)
abs(proportion.correlations) %>% colSums(na.rm = TRUE)
kable(abs(patience.correlations) %>% colSums(na.rm = TRUE)
abs(proportion.correlations) %>% colSums(na.rm = TRUE))
x <- abs(patience.correlations) %>% colSums(na.rm = TRUE)
y <- abs(proportion.correlations) %>% colSums(na.rm = TRUE)
left_join(x, y)
kable(abs(patience.correlations) %>% colSums(na.rm = TRUE))
kable(abs(proportion.correlations) %>% colSums(na.rm = TRUE))
kable(abs(patience.correlations) %>% colSums(na.rm = TRUE))
kable(abs(proportion.correlations) %>% colSums(na.rm = TRUE))
x + y
data.frame(abs(patience.correlations) %>% colSums(na.rm = TRUE))
y <- data.frame(abs(proportion.correlations) %>% colSums(na.rm = TRUE))
z <- data.frame(abs(beta.delta.correlations) %>% colSums(na.rm = TRUE))
left_join(x, y, z)
x <- data.frame(abs(patience.correlations) %>% colSums(na.rm = TRUE))
y <- data.frame(abs(proportion.correlations) %>% colSums(na.rm = TRUE))
z <- data.frame(abs(beta.delta.correlations) %>% colSums(na.rm = TRUE))
left_join(x, y, z)
join(x, y, z)
library(tidyverse)
join(x, y, z)
View(x)
View(y)
View(z)
rbind(x, y, z)
rbind(x, y)
x <- data.frame(abs(patience.correlations) %>% colSums(na.rm = TRUE))
y <- data.frame(abs(proportion.correlations) %>% colSums(na.rm = TRUE))
z <- data.frame(abs(beta.delta.correlations) %>% colSums(na.rm = TRUE))
rbind(x, y)
View(x)
x <- data.frame(abs(patience.correlations) %>% summarise(Vakue = colSums(na.rm = TRUE)))
x <- data.frame(abs(patience.correlations) %>% summarise(Value = colSums(., na.rm = TRUE)))
x <- data.frame(summarise(Value = colSums(abs(patience.correlations), na.rm = TRUE)))
patience.correlations %>%
mutate_all(abs())
patience.correlations %>%
mutate_all(abs(.))
patience.correlations %>%
mutate_each(abs())
mutate_each(abs
patience.correlations %>%
patience.correlations %>%
mutate_each(abs)
patience.correlations %>%
mutate_each(abs(.))
patience.correlations %>%
map(abs(.))
patience.correlations %>%
map(abs())
patience.correlations %>%
map(., abs())
patience.correlations %>%
map(., abs)
patience.correlations %>%
map(., abs) %>%
summarise(Value = colSums(na.rm = TRUE))
patience.correlations %>%
map(., abs) %>%
summarise(Value = colSums(., na.rm = TRUE))
x <- data.frame(summarise(Value = colSums(abs(patience.correlations), na.rm = TRUE)))
x <- data.frame(abs(patience.correlations) %>% colSums(na.rm = TRUE))
x <- data.frame(abs(patience.correlations) %>% colSums(na.rm = TRUE))
x <- data.frame(abs(patience.correlations) %>% colSums(na.rm = TRUE)) %>% colnames("z")
x <- data.frame(abs(patience.correlations) %>% colSums(na.rm = TRUE))
colnames(x, "Value")
x <- data.frame(abs(patience.correlations) %>% colSums(na.rm = TRUE))
View(x)
x <- data.frame(abs(patience.correlations) %>% colSums(na.rm = TRUE)) %>% mutate("value" = abs.patience)
x %>% mutate(value = abs.patience.correlations......colSums.na.rm...TRUE.)
x %>% mutate(value = abs.patience.correlations......colSums.na.rm...TRUE.) %>% select(value)
y <- y %>% mutate(value = abs.proportion.correlations......colSums.na.rm...TRUE.)
z <- data.frame(abs(beta.delta.correlations) %>% colSums(na.rm = TRUE)) %>% select(value)
z <- z %>% mutate(value = abs.beta.delta.correlations......colSums.na.rm...TRUE.) %>% select(value)
rbind(x, y, z)
x <- data.frame(abs(patience.correlations) %>% colSums(na.rm = TRUE))
x <- x %>% mutate(value = abs.patience.correlations......colSums.na.rm...TRUE.) %>% select(value)
y <- data.frame(abs(proportion.correlations) %>% colSums(na.rm = TRUE))
y <- y %>% mutate(value = abs.proportion.correlations......colSums.na.rm...TRUE.) %>% select(value)
z <- data.frame(abs(beta.delta.correlations) %>% colSums(na.rm = TRUE))
z <- z %>% mutate(value = abs.beta.delta.correlations......colSums.na.rm...TRUE.) %>% select(value)
rbind(x, y, z)
z
x <- data.frame(abs(patience.correlations) %>% colSums(na.rm = TRUE))
colnames(x) <- "value"
View(x)
x <- data.frame(abs(patience.correlations) %>% colSums(na.rm = TRUE))
colnames(x) <- "value"
y <- data.frame(abs(proportion.correlations) %>% colSums(na.rm = TRUE))
colnames(y) <- "value"
z <- data.frame(abs(beta.delta.correlations) %>% colSums(na.rm = TRUE))
colnames(z) <- "value"
rbind(x, y, z)
kable(rbind(x, y, z))
kable(rbind(x, y, z) %>% arrange())
kable(rbind(x, y, z) %>% arrange(., value))
kable(rbind(x, y, z) %>% arrange(value))
kable(rbind(x, y, z))
?kable
xx <- rbind(x, y, z)
View(xx)
xx %>% arrange(value)
xx %>% arrange(value, desc())
rbind(x, y, z) %>% desc(value)
rbind(x, y, z)
kable(rbind(x, y, z))
cor.summary <- rbind(x, y, z)
cor.summary[order(value),]
cor.summary <- rbind(x, y, z)
cor.summary[order(value),]
View(cor.summary)
cor.summary[order(cor.summary$value),]
zz <- cor.summary[order(cor.summary$value),]
kable(zz)
kable(rbind(x, y, z))
average.correlations <- db %>% cor(use="pairwise.complete.obs") %>% # using people who are consistent. proportions
as.data.frame() %>%
round(2) %>%
select(average, average.consistent)
zz <- data.frame(abs(average.correlations)) %>% colSums(na.rm = TRUE)
kable(rbind(x, y, z, zz))
zz
zz <- data.frame(abs(average.correlations)) %>% colSums(na.rm = TRUE)
kable(rbind(x, y, z, zz))
colnames(zz) <- "value"
zz <- data.frame(abs(average.correlations)) %>% colSums(na.rm = TRUE)
colnames(zz) <- "value"
zz <- data.frame(abs(average.correlations)) %>% colSums(na.rm = TRUE)
zz
zz <- data.frame(abs(average.correlations)) %>% colSums(na.rm = TRUE))
zz <- data.frame(abs(average.correlations) %>% colSums(na.rm = TRUE))
zz
colnames(zz) <- "value"
kable(rbind(x, y, z, zz))
kable(rbind(x, y, zz, z))
