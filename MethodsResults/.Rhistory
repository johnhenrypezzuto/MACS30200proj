car.accident.had = recode(Q12.9, `0`= 0, .default=1))
#delay.discounting$drinker
#fix alcohol age
delay.discounting <- delay.discounting %>% mutate(Q11.5 = as.numeric(Q11.5))
delay.discounting$Q11.5[which(delay.discounting$Q11.5==0)] <- NA
# gender variables
delay.discounting <- delay.discounting %>%
mutate(gender_char = str_to_lower(Q17.2_1),
gender = recode(gender_char, male = 1,  female = 0),
othergender = recode(gender_char, male = 0, female = 0, .default = 1))
female <- delay.discounting$gender[which(delay.discounting$gender==0)]
female <- sum(female == 0)
male <- delay.discounting$gender[which(delay.discounting$gender==1)]
male <- sum(male == 1)
#mark people who avoided sex questions
delay.discounting <- delay.discounting %>% mutate("No.Sex.Answer" = Q16.3 == "I prefer not to answer")
delay.discounting <- delay.discounting %>%
rowwise() %>%
mutate(Single = recode((Q17.4), "Single, never married"= 1, .default = 0),     # marriage
Married = recode((Q17.4), "Married or domestic partnership" = 1, .default = 0),
Widowed = recode((Q17.4), "Widowed" = 1, .default = 0),
Divorced = recode((Q17.4), "Divorced" = 1, .default = 0),
Separated = recode((Q17.4), "Separated" = 1, .default = 0)) %>%
mutate(Democrat = recode((Q17.51), "Democrat"= 1, .default = 0),               # politics
Republican = recode((Q17.51), "Republican"= 1, .default = 0),
Independent = recode((Q17.51), "Independent"= 1, .default = 0),
Other.Political.Party = recode((Q17.51), "Other"= 1, .default = 0),
No.Political.Party = recode((Q17.51), "None"= 1, .default = 0)) %>%
mutate(Employed = recode((Q17.10), "Employed for wages"= 1, .default = 0),     # employment status
Self.Employed = recode((Q17.10), "Self-employed"= 1, .default = 0),
Seeking.Work = recode((Q17.10), "Out of work and looking for work" = 1, .default = 0),
Not.Seeking.Work = recode((Q17.10),"Out of work but not currently looking for work" = 1, .default = 0),
Homemaker = recode((Q17.10),"A homemaker" = 1, .default = 0),
Student = recode((Q17.10),"A student" = 1, .default = 0),
Military = recode((Q17.10),"Military" = 1, .default = 0),
Retired = recode((Q17.10),"Retired" = 1, .default = 0),
Unable.to.Work = recode((Q17.10), "Unable to work" = 1, .default = 0))
# Speed Up Small Present
speedup.small.present <- c("Q2.2_1, Q2.2_2, Q2.2_3, Q2.2_4, Q2.2_5, Q2.2_6, Q2.2_7, Q2.2_8, Q2.2_9, Q2.2_10, Q2.2_11, Q2.2_12, Q2.2_13, Q2.2_14, Q2.2_15, Q2.2_16")
#Speed Up Small Future
speedup.small.future <- c("Q3.2_1, Q3.2_2, Q3.2_3, Q3.2_4, Q3.2_5, Q3.2_6, Q3.2_7, Q3.2_8, Q3.2_9, Q3.2_10, Q3.2_11, Q3.2_12, Q3.2_13, Q3.2_14, Q3.2_15, Q3.2_16")
# Speed Up Large Future
speedup.large.future <- c("Q4.2_1, Q4.2_2, Q4.2_3, Q4.2_4, Q4.2_5, Q4.2_6, Q4.2_7, Q4.2_8, Q4.2_9, Q4.2_10, Q4.2_11, Q4.2_12, Q4.2_13, Q4.2_14, Q4.2_15, Q4.2_16")
# Speed Up Large Present
speedup.large.present <- c("Q5.2_1, Q5.2_2, Q5.2_3, Q5.2_4, Q5.2_5, Q5.2_6, Q5.2_7, Q5.2_8, Q5.2_9, Q5.2_10, Q5.2_11, Q5.2_12, Q5.2_13, Q5.2_14, Q5.2_15, Q5.2_16")
# Time Discounting Small Present
td.small.present <- c("Q6.2_1, Q6.2_2, Q6.2_3, Q6.2_4, Q6.2_5, Q6.2_6, Q6.2_7, Q6.2_8, Q6.2_9, Q6.2_10, Q6.2_11, Q6.2_12, Q6.2_13, Q6.2_14, Q6.2_15, Q6.2_16")
# Time Discounting Large Present
td.large.present<- c("Q7.2_1, Q7.2_2, Q7.2_3, Q7.2_4, Q7.2_5, Q7.2_6, Q7.2_7, Q7.2_8, Q7.2_9, Q7.2_10, Q7.2_11, Q7.2_12, Q7.2_13, Q7.2_14, Q7.2_15, Q7.2_16")
#Time Discount Small Future
td.small.future<- c("Q8.2_1, Q8.2_2, Q8.2_3, Q8.2_4, Q8.2_5, Q8.2_6, Q8.2_7, Q8.2_8, Q8.2_9, Q8.2_10, Q8.2_11, Q8.2_12, Q8.2_13, Q8.2_14, Q8.2_15, Q8.2_16")
# Time Discounting Large Future
td.large.future<- c("Q9.2_1, Q9.2_2, Q9.2_3, Q9.2_4, Q9.2_5, Q9.2_6, Q9.2_7, Q9.2_8, Q9.2_9, Q9.2_10, Q9.2_11, Q9.2_12, Q9.2_13, Q9.2_14, Q9.2_15, Q9.2_16")
# Group Questions Together
discountingtasks <- c(speedup.small.present, speedup.small.future, speedup.large.future, speedup.large.present, td.small.present, td.large.present, td.small.future, td.large.future)
#Name of Questions
discountingtasksnames <- c("speedup.small.present, speedup.small.future, speedup.large.future, speedup.large.present, td.small.present, td.large.present, td.small.future, td.large.future")
discountingtasksnames <- unlist(strsplit(discountingtasksnames, ","))
discountingtasksnames <- str_replace_all(discountingtasksnames, fixed(" "), "")
#Empty Data
questions <- tibble("speedup.small.present"=1:16, "speedup.small.future"=1:16, "speedup.large.future"=1:16,  "speedup.large.present"=1:16, "td.small.present"=1:16, "td.large.present"=1:16, "td.small.future"=1:16, "td.large.future"=1:16)
seperator <- function(discountingtasks){
i=1
for(tasks in discountingtasks){
working <- unlist(strsplit(tasks, ","))
working <- str_replace_all(working, fixed(" "), "")
questions[i] <<- working
i = i+1
}
return(i)
}
seperator(discountingtasks)
results <- tibble("ssp.consistent"=1:(nrow(delay.discounting)-1), "ssp.indifference"=1:(nrow(delay.discounting)-1), "ssf.consistent"=1:(nrow(delay.discounting)-1), "ssf.indifference"=1:(nrow(delay.discounting)-1), "slf.consistent"=1:(nrow(delay.discounting)-1), "slf.indifference"=1:(nrow(delay.discounting)-1), "slp.consistent"=1:(nrow(delay.discounting)-1), "slp.indifference"=1:(nrow(delay.discounting)-1),"tdsp.consistent"=1:(nrow(delay.discounting)-1), "tdsp.indifference"=1:(nrow(delay.discounting)-1), "tdlp.consistent"=1:(nrow(delay.discounting)-1), "tdlp.indifference"=1:(nrow(delay.discounting)-1), "tdsf.consistent"=1:(nrow(delay.discounting)-1), "tdsf.indifference"=1:(nrow(delay.discounting)-1), "tdlf.consistent"=1:(nrow(delay.discounting)-1), "tdlf.indifference"=1:(nrow(delay.discounting)-1))
##### find indifference point and consistency ####
questionset = 1
datafiller = 0
for(questionset in 1:ncol(questions)){ #all 8 types of questions
#data
findindifference <- delay.discounting %>%
select(questions[[questionset]]) %>%
slice(-1)
# scrape dollar amounts from the questions themselves
# set for first half
if(questionset<=4){
numbers.in.questions <- information.row %>%
select(questions[[questionset]]) %>%
str_sub(256, ) %>%
parse_number()
} else if(questionset<=6){
# 3/4
numbers.in.questions <- information.row %>%
select(questions[[questionset]]) %>%
str_replace("-", "") %>%
str_sub(173, ) %>%
parse_number()
} else if(questionset<=8){
# 4/4
numbers.in.questions <- information.row %>%
select(questions[[questionset]]) %>%
str_replace("-", "") %>%
str_sub(180, ) %>%
parse_number()
}
# link together
difference.amount.key <- data.frame(questions[[questionset]], numbers.in.questions)
findindifference$switch.column = NA
findindifference$consistent = NA
#nrow(findindifference)
for(row in 1:nrow(findindifference)){ #each participant for a given set of questions
## foundations
firstswitch = FALSE
column=1
consistent = TRUE # you are consistent until proven otherwise
###
for (column in 1:(ncol(findindifference)-2)){ # each choice
if (findindifference[row,column]=="No" & firstswitch == FALSE ||findindifference[row,column]=="1" & firstswitch == FALSE){#first indifference
switch <- names(findindifference[row,column])
firstswitch = TRUE
}
if (findindifference[row,column]=="Yes" & firstswitch == TRUE || findindifference[row,column]=="2" && firstswitch == TRUE){  #find if consistent
consistent = FALSE
}
if (column==16 & firstswitch == FALSE){#people who are ALWAYS patient
switch <- "FOUND ME"
}
column = column+1
}
findindifference$consistent[row] <- consistent
findindifference$switch.column[row] <- switch #record where first switch
}
#consistent
datafiller <- datafiller + 1
results[datafiller] <- findindifference$consistent
# dollar amounts
## convert switch points into indifference points
datafiller <- datafiller + 1
results[datafiller] <- difference.amount.key$numbers.in.questions[match(findindifference$switch.column, difference.amount.key$questions..questionset..)]
if(questionset== 1 | questionset== 2 |questionset== 5 |questionset== 7){
results[datafiller] <- results[datafiller] - 1
} else if (questionset== 3 | questionset== 4 |questionset== 6 |questionset== 8){
results[datafiller] <- results[datafiller] - 10
}
}
hyperbolic.exponential <- tibble("ssp.hyperbolic"=1:(nrow(delay.discounting)-1), "ssp.exponential"=1:(nrow(delay.discounting)-1), "ssf.hyperbolic"=1:(nrow(delay.discounting)-1), "ssf.exponential"=1:(nrow(delay.discounting)-1), "slf.hyperbolic"=1:(nrow(delay.discounting)-1), "slf.exponential"=1:(nrow(delay.discounting)-1), "slp.hyperbolic"=1:(nrow(delay.discounting)-1), "slp.exponential"=1:(nrow(delay.discounting)-1),"tdsp.hyperbolic"=1:(nrow(delay.discounting)-1), "tdsp.exponential"=1:(nrow(delay.discounting)-1), "tdlp.hyperbolic"=1:(nrow(delay.discounting)-1), "tdlp.exponential"=1:(nrow(delay.discounting)-1), "tdsf.hyperbolic"=1:(nrow(delay.discounting)-1), "tdsf.exponential"=1:(nrow(delay.discounting)-1), "tdlf.hyperbolic"=1:(nrow(delay.discounting)-1), "tdlf.exponential"=1:(nrow(delay.discounting)-1))
# if(i == 2){
#   present.now = TRUE} else if (i == 4) {
#     present.now = FALSE
#   }
hyperbolic_calculator <- function(indifference, present, small){
if (present == TRUE){
d = 1
} else if (present == FALSE) {
d = 7
}
if (small== TRUE){
a = 30
} else if (small == FALSE) {
a = 300
}
#formula
k = (((a / indifference) - 1) / d)
return(k)
}
exponential_calculator <- function(indifference, present, small){
if (present == TRUE){
d = 1
} else if (present == FALSE) {
d = 7
}
if (small == TRUE){
a = 30
} else if (small == FALSE) {
a = 300
}
#formula
k = (a / indifference)^(1 / d) - 1
return(k)
}
#if i have negative numbers they should be 0
for(i in 1:ncol(results)){
results[i][results[i] < 0] <- 0
}
## if calculating quasi hyperbolic this is where it should be included ##
## SPEED UP ##
## calculate amounts for speed up questions = total - switch. Divide by total to make comparison possible
for(i in seq(2, 4, by = 2)){
results[i][is.na(results[i])] <- 30 #ppl who paid everything
results[i] <- 30 - results[i]
## Calculating Hyperbolic and Exponential
if(i == 2){
present.now = TRUE} else if (i == 4) {
present.now = FALSE
}
# hyperbolic
hyperbolic.exponential[i-1] = hyperbolic_calculator(results[i], present = present.now, small = TRUE)
# exponential
hyperbolic.exponential[i] = exponential_calculator(results[i], present = present.now, small = TRUE)
# proportional
results[i] <- results[i]/30
}
####################
for(i in seq(6, 8, by = 2)){
results[i][is.na(results[i])] <- 300 #ppl who paid everything
results[i] <- 300 - results[i]
## Calculating Hyperbolic, Exponential
if(i == 6){
present.now = FALSE} else if (i == 8) {
present.now = TRUE
}
# hyperbolic
hyperbolic.exponential[i-1] = hyperbolic_calculator(results[i], present = present.now, small = FALSE)
#exponential
hyperbolic.exponential[i] = exponential_calculator(results[i], present = present.now, small = TRUE)
# proportional
results[i] <- results[i]/300
}
## DELAY DISCOUNTING ################
# calculate non switchers
for(i in seq(10, 14, by = 4)){
results[i][is.na(results[i])] <- 30 #ppl always waited
## Calculating Hyperbolic, Exponential
if(i == 10){
present.now = TRUE} else if (i == 14) {
present.now = FALSE
}
# hyperbolic
hyperbolic.exponential[i-1] = hyperbolic_calculator(results[i], present = present.now, small = TRUE)
# exponential
hyperbolic.exponential[i] = exponential_calculator(results[i], present = present.now, small = TRUE)
# proportional
results[i] <-results[i]/30
}
######################
for(i in seq(12, 16, by = 4)){
results[i][is.na(results[i])] <- 300 #ppl always waited
## Calculating Hyperbolic and Exponential
if(i == 12){
present.now = TRUE} else if (i == 16) {
present.now = FALSE
}
#hyperbolic
hyperbolic.exponential[i-1] <- hyperbolic_calculator(results[i], present = present.now, small = FALSE)
#exponential
hyperbolic.exponential[i] = exponential_calculator(results[i], present = present.now, small = TRUE)
#proportional
results[i] <-results[i]/300
}
### Create an Average of the Proportional
results <- results %>%
mutate(average = rowMeans(.))
# save results #############
results <- add_row(results, .before=1)
hyperbolic.exponential <- add_row(hyperbolic.exponential, .before=1)
delay.discounting <- bind_cols(delay.discounting, results)
for(i in seq(2, ncol(results), by = 2)){
results[i][results[i-1] == FALSE] <- NA
hyperbolic.exponential[i-1][results[i-1] == FALSE] <- NA # hyperbolic
hyperbolic.exponential[i][results[i-1] == FALSE] <- NA # exponential
}
colnames(results) <- paste(colnames(results), "consistent",  sep = ".")
results <- results %>%
select(seq(2, ncol(results), by = 2)) %>%
mutate(average.consistent = rowMeans(.))
# save proportional
delay.discounting <- bind_cols(delay.discounting, results)
# save hyperbolic & exponential
delay.discounting <- bind_cols(delay.discounting, hyperbolic.exponential)
choices <- delay.discounting %>%
select(Q2.2_1:Q9.2_16) %>%
select(-contains("click"), -contains("page"))
choices[choices=="Yes" | choices==1] <- 0 ## impatient chocies
choices[choices=="No" | choices==2] <- 1
# overall patience
patience <- choices %>%
mutate_all(funs(as.numeric)) %>%
rowSums()
patience <- as_tibble(patience/ncol(choices))%>%
mutate(Patience = value) %>%
select(-value)
delay.discounting <- bind_cols(delay.discounting, patience)
# patience speed up
s.patience <- choices %>%
select(1:64) %>%
mutate_all(funs(as.numeric)) %>%
rowSums()
s.patience <- as_tibble(s.patience/ncol(choices))%>%
mutate(s.Patience = value) %>%
select(-value)
delay.discounting <- bind_cols(delay.discounting, s.patience)
# patience time discounting
td.patience <- choices %>%
select(65:ncol(choices)) %>%
mutate_all(funs(as.numeric)) %>%
rowSums()
td.patience <- as_tibble(td.patience/ncol(choices))%>%
mutate(td.Patience = value) %>%
select(-value)
delay.discounting <- bind_cols(delay.discounting, td.patience)
db <- read_csv("Delay Discounting_computer_80.csv")
db.newdata <- delay.discounting %>%  #collect old calculated vars
select("IPAddress","Minutes_to_Complete", bmi:ncol(delay.discounting))
db <- db %>%  # remove discounting and emotions
select(-(1:3), -(5:274))
db <- right_join(db, db.newdata)
#db %>% slice(1) %>% View()
fms <- db %>%
select(starts_with("Q120"), Q15.11) %>% # take only the columns relating the fms scale
mutate_all(funs(as.numeric)) %>%
mutate(comparison.shop = Q120_1_1, bills.on.time = Q120_1_9, monthly.expense.record = Q120_1_2, # give meaningful names
within.budget = Q120_1_10, credit.infull = Q120_1_6, maxout.creditcard = Q120_1_7,
minimum.on.loan = Q120_1_8, maintain.emergency.fund = Q120_1_11,
save.money.paycheck = Q120_1_12, save.longterm.goal = Q120_1_13, save.retirement = Q120_1_14,
bought.stock = Q120_1_15, health.insurance = Q120_1_16, auto.home.insurance = Q120_1_17,
life.insurance = Q120_1_18) %>%
mutate(smartphone.warenty = recode(Q15.11, `1`=1, `2`=0)) %>% #smart phone warrenty
select(-starts_with("Q")) %>% # get rid of original questions
mutate(maxout.creditcard = 6 - maxout.creditcard,    #reverse coded as descried in Dew & Xiao
minimum.on.loan = 6 - minimum.on.loan)
# OverallFMS=average of all the variables (making sure maxout.creditcard and minimum.on.loan are reverse coded).
# FMS_F1=average of items 8-12
# FMS_F2=average of items 13-15
# FMS_F3=average of items 1-4
# FMS_F4=average of items 5-7
# save results
db <- bind_cols(fms, db)
#rename columns
db <- rename(db, vape = Q11.2, smoke = Q11.3, smoke.age = Q11.9, alcohol = Q11.4, alcohol.age = Q11.5,
passed.out.from.drinking = Q11.10, caffeine = Q11.6, marijuana = Q11.7, gamble = Q11.8,
attention.to.politics = Q12.2, register.vote = `12.11`, senate = Q12.21,
donate.campaign = Q12.22,music.tax = Q12.4, green.tax = Q12.5, ideology = Q12.61, vote = Q12.71,
vote.early = Q12.72, arrested = Q12.7, speedingtickets = Q12.8, caraccident = Q12.9,
wealth.comparison = Q13.2, creditcard.late = Q13.3,
payday.lending = Q13.4, sustainable.goods = Q13.6,
sustain.self = Q13.7, income.saved.percent = Q13.8_1, actual.saved = Q104,
prescription = Q14.2, fastfood = Q14.3, actual.debt = Q105,
dentalstatus = Q14.4, exercise = Q14.5, vaccination = Q14.6, washinghands = Q14.7_1,
television = Q15.2, high.adreneline = Q15.3, physical.fight = Q15.4, luxurygoods = Q15.5,
shopping.anxiety = Q15.6, check.online = Q15.7, had.sex = Q16.3, sex.age = Q16.4, adultry = Q16.5,
multple.partners = Q16.51, inebriated.sex = Q16.6, age = Q17.3, marital.status = Q17.4,
have.children = Q17.5, politcal.affiliation = Q17.51,
age.firstchild = Q17.6, weight = Q17.7, employmentstatus = Q17.10, hoseholdincome = Q17.11,
expected.householdincome = Q17.12, race = Q17.9, english.native = Q17.14)
db <- db %>%
select(-starts_with("Q")) %>% # don't keep original questions
select(-(SC0:hitId), -gender_char, -assignmentId)  # get rid of non-numeric
#mutate_all(funs(as.numeric))
confusedpeople.exclude <- db %>%
filter(tdsp.indifference>0, tdlp.indifference>0,  tdsf.indifference>0, tdlf.indifference>0,
ssp.indifference>0, slp.indifference>0, ssf.indifference>0, slf.indifference>0)
db <- db %>% mutate("Confused" = !IPAddress %in% confusedpeople.exclude$IPAddress) %>% mutate_all(as.numeric) %>%
select(-IPAddress)# mark confused people
confusedpeople.exclude <-confusedpeople.exclude %>% mutate_all(as.numeric)
confusedpeople.exclude %>% summarise(Percent.of.Confused.People = (nrow(db)-nrow(.))/nrow(db))
db %>%
mutate(Percent.Inconsistent = average.consistent) %>%
select(Percent.Inconsistent) %>%
summarise_all(funs(100*mean(is.na(.))))
sd.times.3 <- apply(db, 2, sd, na.rm = TRUE)*3
sd.times.3 <- as.data.frame(sd.times.3)
mean.cols <- colMeans(db, na.rm = TRUE)
mean.cols <- as.data.frame(mean.cols)
mean.sd3 <- sd.times.3 + mean.cols
continuous.vars = c("alcohol.age", "sustain.self", "smoke.age", "passed.out.from.drinking", "speedingtickets", "caraccident", "physical.fight", "check.online", "age", "age.firstchild", "weight", "bmi")
for(i in continuous.vars){ ##this wont work for car accidents cause mean.sd3 = 1 ...
db[,i][abs(db[,i])>mean.sd3[i,1]] <- NA
}
## age correlations
age.min <- min(db$age, na.rm = TRUE)
age.max <- max(db$age, na.rm = TRUE)
## final sample size
final.samplesize <- nrow(db)
#(ncol(db)-8):ncol(db)
clean.correlations <- db %>% cor(use="pairwise.complete.obs") %>% #using people who are consistent. proportions
as.data.frame() %>%
round(2) %>%
select((ncol(db)-11):ncol(db)-4)
patience.correlations <- db %>% cor(use="pairwise.complete.obs") %>% #patience scores
as.data.frame() %>%
round(2) %>%
select((ncol(db)-2):ncol(db)-1)
full.correlations <- db %>% cor(use="pairwise.complete.obs") %>% as.data.frame() %>% round(2) #full correlations
exclude.confused.correlations <- confusedpeople.exclude %>% # exclude totally irrational people
cor(use="pairwise.complete.obs") %>%
as.data.frame() %>%
select(ssp.indifference, ssf.indifference, slp.indifference,slf.indifference,
tdsp.indifference, tdsf.indifference, tdlp.indifference, tdlf.indifference) %>%
round(2)
clean.onlydiscount <- clean.correlations[colnames(clean.correlations),] # only consistent discounting vars
correlations <- full.correlations %>% #only non-consistent discounting columns
select(ssp.indifference, ssf.indifference, slp.indifference,slf.indifference,
tdsp.indifference, tdsf.indifference, tdlp.indifference, tdlf.indifference, average)
onlydiscount <- full.correlations[colnames(correlations),] # correlations with non-consistent discounting columns
library(knitr)
taskname <- discountingtasksnames
taskname <- sort(as.character(taskname))
sooner <- c("1 month", "today")
later <- c("7 months", "6 months")
maximum.payment.size <- c("300", "300", "30", "30")
methods.table <- data.frame(taskname, sooner, later, maximum.payment.size)
methods.table %>% kable(align = 'r', col.names = c("Discounting Task", "Sooner Payment", "Later Payment", "Maximum Payment Size"))
if(!require(reticulate)){install.packages("reticulate")}
if(!require(reticulate)){install.packages("reticulate")}
if(!require(corrplot)){install.packages("corrplot")}
if(!require(psych)){install.packages("psych")}
if(!require(tidyverse)){install.packages("tidyverse")}
if(!require(GGally)){install.packages("GGally")}
taskname <- discountingtasksnames
taskname <- sort(as.character(taskname))
str_replace(taskname, "td", "Time Discounting")
taskname <- str_replace(taskname, "td", "Time Discounting") %>%
str_replace(taskname, ".", " ")
taskname <- discountingtasksnames
taskname <- sort(as.character(taskname))
taskname <- str_replace(taskname, "td", "Time Discounting") %>%
str_replace(taskname, ".", " ")
taskname <- str_replace(taskname, "td", "Time Discounting") %>%
str_replace(., ".", " ")
taskname
taskname <- discountingtasksnames
taskname <- sort(as.character(taskname))
taskname <- taskname %>%
str_replace(., "td", "Time Discounting") %>%
str_replace(., ".", " ")
taskname
taskname <- discountingtasksnames
taskname <- sort(as.character(taskname))
taskname <- taskname %>%
str_replace(., "td", "Time Discounting")
taskname
str_replace(taskname, ".", " ")
taskname <- discountingtasksnames
taskname <- sort(as.character(taskname))
taskname <- str_replace(taskname, "td", "Time Discounting")
taskname
str_replace_all(taskname, ".", " ")
z <- str_replace_all(taskname, ".", " ")
z
taskname
gsub(".", " ", taskname)
gsub(".", ", taskname)
gsub(".", ", taskname)
gsub(".", , taskname)
gsub(".", ", taskname)
z <- gsub(".", ", taskname)
taskname
str_replace(taskname, ".")
str_replace(taskname, ".", )
str_replace(taskname, ".", " ")
str_replace_all(taskname, ".", " ")
str_replace_all(taskname, ".", "z")
str_replace(taskname, ".", "z")
taskname
str_replace(taskname, ".", "")
str_replace(taskname, fixed("."), "")
str_replace(taskname, fixed("."), " ")
str_replace_all(taskname, fixed("."), " ")
}
s <- strsplit(x, " ")[[1]]
simpleCap <- function(x) {
s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2),
sep="", collapse=" ")
}
apply(taskname, simpleCap)
sapply(taskname, simpleCap)
taskname <- str_replace_all(taskname, fixed("."), " ")
sapply(taskname, simpleCap)
apply(taskname, simpleCap)
sapply(taskname, simpleCap)
taskname <- sapply(taskname, simpleCap)
taskname
sooner <- c("1 month", "today")
later <- c("7 months", "6 months")
maximum.payment.size <- c("300", "300", "30", "30")
methods.table <- data.frame(taskname, sooner, later, maximum.payment.size)
methods.table %>% kable(align = 'r', col.names = c("Discounting Task", "Sooner Payment", "Later Payment", "Maximum Payment Size"))
library(knitr)
methods.table %>% kable(align = 'r', col.names = c("Discounting Task", "Sooner Payment", "Later Payment", "Maximum Payment Size"))
proper=function(x) paste0(toupper(substr(x, 1, 1)), tolower(substring(x, 2)))
taskname <- sapply(taskname, proper)
taskname
library(knitr)
taskname <- discountingtasksnames
taskname <- sort(as.character(taskname))
taskname <- str_replace(taskname, "td", "Time Discounting")
taskname <- str_replace_all(taskname, fixed("."), " ")
proper=function(x) paste0(toupper(substr(x, 1, 1)), tolower(substring(x, 2)))
sapply(taskname, proper)
apply(taskname, proper)
proper(taskname)
simpleCap(taskname)
simpleCap(taskname)
taskname <- proper(taskname)
sooner <- c("1 month", "today")
later <- c("7 months", "6 months")
maximum.payment.size <- c("300", "300", "30", "30")
methods.table <- data.frame(taskname, sooner, later, maximum.payment.size)
methods.table %>% kable(align = 'r', col.names = c("Discounting Task", "Sooner Payment", "Later Payment", "Maximum Payment Size"))
abbreviation <- c("slf", "slp", "ssf", "ssp", "tdlf", "tdlp", "tdsf", "tdsp")
library(knitr)
taskname <- discountingtasksnames
taskname <- sort(as.character(taskname))
taskname <- str_replace(taskname, "td", "Time Discounting")
taskname <- str_replace_all(taskname, fixed("."), " ")
proper=function(x) paste0(toupper(substr(x, 1, 1)), tolower(substring(x, 2)))
taskname <- proper(taskname)
abbreviation <- c("slf", "slp", "ssf", "ssp", "tdlf", "tdlp", "tdsf", "tdsp")
sooner <- c("1 month", "today")
later <- c("7 months", "6 months")
maximum.payment.size <- c("300", "300", "30", "30")
methods.table <- data.frame(taskname, abbreviation, sooner, later, maximum.payment.size)
methods.table %>% kable(align = 'r', col.names = c("Discounting Task","Abbreviation" , "Sooner Payment", "Later Payment", "Maximum Payment Size"))
